<?php
/** 
 * @file
 * File where the mil_page and mil_page_basic class are defined.
 */

include_once $GLOBALS['config_ini']['site_root']."/1001_addon/library/datamalico/pagination.class.php";
include_once $GLOBALS['config_ini']['site_root']."/1001_addon/library/mil_/mil_basket.class.php";

/**
 * This class manage:
 * - security of the page.
 * - translation (internationalization)
 * - ajax output (or not) (That is to say: Content-type: application/json or Content-type: text/html)
 * - $_GET and $_POST reception
 *
 * What is mil_page:
 * - Access mangement: can access or not (the user must write his own function depending on the framework he uses).
 * - Ease the parameters handling: GET POST
 * - Render HTML and JS:
 * 	- Usefull for translations (thanks to placeholders) and translations standing in a file english.lang.php...
 * 	- Usefull for variables (thanks to placeholders)
 * - Manage translation caching: each translation is cached, but you can force the refreshment by using:
 * 	- ?langs=refresh in the url
 * 	- or the $GLOBALS['config_ini']['langs'] = 'refresh'; // or "no_refresh" in mil_.conf.php
 *
 * @warning When using this class, you must adapt security to your needs:
 * 	- the method mil_page::mil_check_security_access to your needs
 * 	- mil_page::current_user_keys
 *
 *
 * You must know that any web page generated by the mil_page class, has the following: (See render_html_page() for more details)
 *
 * Javascript code:
 * @code
 * var lang = "english";		// or whatever other language you have defined
 * var pagination = {page: 2, perpage: 15};	// or whatever other params you have defined
 * var page_params = {
 * 	// all the $_GET and $_POST params received by the page
 * };
 * var current_user_keys = {
 * 	// Your own mil_page::current_user_keys (So that you can respect your own security given in the PHP code on the server side).
 * } 
 * @endcode
 *
 * HTML code:
 * @code
 '
 <div id="div_html_operators" style="display:none;">

 <select id="html_simple_operators">
 <option value="eq" selected="selected">' . $GLOBALS['mil_lang_common']['operator_equals'] . '</option>
 <option value="gt_or_eq">' . $GLOBALS['mil_lang_common']['operator_gt_or_eq'] . '</option>
 <option value="lt_or_eq">' . $GLOBALS['mil_lang_common']['operator_lt_or_eq'] . '</option>
 <option value="betw">' . $GLOBALS['mil_lang_common']['operator_between'] . '</option>
 </select>

 <select id="html_advanced_operators">
 <option value="like" selected="selected">' . $GLOBALS['mil_lang_common']['operator_containing'] . '</option>
 <option value="notlike">' . $GLOBALS['mil_lang_common']['operator_not_contain'] . '</option>
 <option value="eq">' . $GLOBALS['mil_lang_common']['operator_equals'] . '</option>
 <option value="noteq">' . $GLOBALS['mil_lang_common']['operator_different'] . '</option>
 <option value="lt">' . $GLOBALS['mil_lang_common']['operator_lt'] . '</option>
 <option value="gt">' . $GLOBALS['mil_lang_common']['operator_gt'] . '</option>
 <option value="lt_or_eq">' . $GLOBALS['mil_lang_common']['operator_lt_or_eq'] . '</option>
 <option value="gt_or_eq">' . $GLOBALS['mil_lang_common']['operator_gt_or_eq'] . '</option>
 <option value="betw">' . $GLOBALS['mil_lang_common']['operator_between'] . '</option>
 <option value="regexp">' . $GLOBALS['mil_lang_common']['operator_regexp'] . '</option>
 <option value="notregexp">' . $GLOBALS['mil_lang_common']['operator_notregexp'] . '</option>
 <option value="begins">' . $GLOBALS['mil_lang_common']['operator_begins'] . '</option>
 <option value="notbegins">' . $GLOBALS['mil_lang_common']['operator_notbegins'] . '</option>
 <option value="ends">' . $GLOBALS['mil_lang_common']['operator_ends'] . '</option>
 <option value="notends">' . $GLOBALS['mil_lang_common']['operator_notends'] . '</option>
 </select>

 </div>
 '
 * @endcode
 * So you can transfer these params as data via an ajax request to a server page.
 *
 * @todo
 * 	- Explain better the functionnality about the translation caching:
 * 		
 *
 * @todo Transform functions into method:
 * - extract_subTemplate_declaration()
 * - extract_subTemplates()
 * - get_tpl_withGoodLang_fromDynamicCache()
 * - get_JS_withGoodLang_fromDynamicCache() WARNING: this function is also used by mil_.conf.php, but has no template then cannot use a mil_page_basic object.
 * - internationalize_html()
 * - internationalize_js()
 * - mil_get_lang_file() 
 */
//class mil_page
class mil_page
{
	public $original_file = null;
	public $ajax = false;

	/**
	 * See the function mil_check_security_access()
	 * @todo By the way, this mil_check_security_access() must be transformed to a mil_page object method
	 *
	 * - page_access: {associative array} Contain the security access params of the page you try to access.
	 * 	- connection_type_access: (mandatory) {string} Is the category of user that can access the page. You can choose among the following values:
	 * 		- "MANAGER_GRANTED": allows only people having an access into the MODx manager (Provided that the current user has the role in 
	 * 			the 'authorized_roles' param)
	 * 		- "WEBSITE_CONNECTED_GRANTED": allows only people having an access into the web site (Provided that the current user has the role in 
	 * 			the 'authorized_roles' param). WARNING: even a manager cannot access if he doesn't have a web site user. (See the 
	 * 			database table: mil_d_manager_registered that makes a link between a manager account and a user account.)
	 * 		- "EVERYBODY_GRANTED": allows everybody, even not connected to access the page.
	 * 	- authorized_roles: (optional if connection_type_access="EVERYBODY_GRANTED") {numerical array} Is a list of roles for each 'connection_type_access'
	 * 		- For the 'connection_type_access' "MANAGER_GRANTED" the list is in the table modx_user_roles.name:
	 * 			- "Editor"
	 * 			- "Publisher"
	 * 			- "Administrator"
	 * 			- "mil_commercial"
	 * 		- For the 'connection_type_access' "WEBSITE_CONNECTED_GRANTED" the list is in the table mil_c_role.role_name:
	 * 			- "Customer"
	 * 			- "Volunteer"
	 * 			- "Professional"
	 * 			- "INTERNAL_STAFF"
	 */
	public $page_access = array (
		"connection_type_access" => "MANAGER_GRANTED"
		, "authorized_roles" => array("Administrator")
	);

	/**
	 * This variable must be define by yourself for your own organization needs, so that you customize and ensure your security yourself.
	 * This variable could be for example:
	 *
	 * - current_user_keys: {associative array} Automatically set depending on session vars, so that we exactly know user credentials
	 * 	- manager
	 * 		- acts_via_manager: {boolean} true|false
	 * 		- connected_in_manager: {boolean} true|false
	 * 		- manager_role: {string} See modx_user_roles : "Administrator"|"Editor"|"Publisher"|"mil_commercial"
	 * 		- manager_user_id: {integer}
	 * 	- website
	 * 		- connected_in_website: {boolean} true|false
	 * 		- registered_roles: {numerical array} See also the mothod mil_page::current_reg_has_role()
	 * 			- [1]:
	 * 				- reg_id: {integer}
	 * 				- role_id: {integer}
	 * 				- role_name: {string} See mil_c_role.role_name eg: "Customer"|"Volunteer"|"Professional"|"INTERNAL_STAFF"
	 * 				- english: {string} See mil_c_role.english
	 * 				- enabled: {integer}
	 * 				- sort_index: {integer}
	 * 		- reg_id: {integer}
	 * 		- webuser_id: {integer}
	 */
	public $current_user_keys = array ();

	/**
	 * page_params: {associative array} Parameters the page has received via GET or POST. See the get_data_from_GET_POST() method to see how this property is built.
	 *
	 * @attention Note that:
	 * 	- a web page has the javascript json variable: page_params.
	 * 	- a web page can transfer its own params to an ajax request via a parameter called $page_params['master_page_params'].
	 * 	To do so, just think that you the ajax JS sender function must send it so (if you use the mil_ library:)
	 * @code
	 * mil_ajax ({
	 * 	data: {
	 * 		pagination: pagination
	 * 		// the mil_page class populates the javascript page_params with the page_params(get and post), so that you can now send them to the ajax server page.
	 * 		, master_page_params: page_params
	 * 	}
	 * 	, url: "[+this_relative_file_path+]/server.select.ajax.php"
	 * 	, success: on_success
	 * });
	 * @endcode
	 * And note that nothing special is required at the reception by the server.ajax.page.php
	 *
	 * For example
	 * @code
	 * <!-- --------------------------------------- -->
	 * <!-- HTML page sending ajax -->
	 * <input type="text" name="user" value="my user 1" />
	 * <input type="text" name="client[email]" value="client@domain.com" />
	 *
	 * // -----------------------------------------
	 * // JS file sending ajax
	 * console.log(page_params);
	 * var dataSentViaAjax = {
	 * 	user: "my user 1"
	 * 	, client: {
	 * 		email: "client@domain.com"
	 * 	}
	 * }
	 *
	 * // -----------------------------------------
	 * // PHP file receiving ajax request:
	 * echo $this_mil_page->page_params['user'];
	 * echo $this_mil_page->page_params['client']['email'];
	 * @endcode
	 */
	public $page_params = array ();

	/**
	 * - lang: {string} Language parameter of the page. eg: "french".
	 * 	So far this parameter is defined in the mil_.conf.php config page. So there are two manners to get the land param:
	 * @code
	 * // ######
	 * // In PHP:
	 * $GLOBALS['config_ini']['region']['lang'];
	 * // or
	 * $this->lang;
	 *
	 * // ######
	 * // In javascript, this var is also accessible as the 'var lang;'
	 * console.log(lang);
	 * @endcode
	 * @warning Do not confuse it with the 'langs=refresh' parameter you can set in the URL to refresh the translation. See the render_html_page() method
	 */
	public $lang;

	/**
	 * This param relies on the pagination class (see pagination.class.php). See its documentation to learn more about this, 
	 * and see the render_html_page() method too.
	 *
	 * The goal of this param is to bereinjected via a protected method into the javascript of a webpage. Thus any page generated by mil_page has a 
	 * 	javascript variable pagination eg:
	 * @code
	 * var pagination = {page: 2, perpage: 15};
	 * @endcode
	 *
	 * You can then transfer this pagination var as a data via an ajax request to a server page.
	 */
	public $pagination = null;


	/**
	 * mil_page_basic::basket: {mil_basket} (mandatory) Is the basket of the current_user (Only a basket which can be consider as an 'active' one but not an 
	 * archived basket: invoiced or abandoned basket).
	 *
	 * See the mil_basket class in mil_basket.class.php to know more about this.
	 */
	public $basket = null;

	/**
	 * @param params {associative array} Params of the page construction
	 * 	- original_file: {string} Should be the magic constant: __FILE__, in order to identify the calling file.
	 * 	- ajax: (optional) {boolean} Specify if the output should be an ajax answer under a JSON form or not.
	 * 		- Default is false.
	 * 		- If true:
	 * 			- The header output will be: Content-type: application/json
	 * 			- Every output like echo or print_r are blocked with an output buffering untill the page end (see mil_page constructor an destructor).
	 * 			- OUTPUT: On destruction, an ouput is done: echo $this->output; with the correct format for the json string.
	 * 		- If false:
	 * 			- The header output will be: Content-type: text/html
	 * 			- There is no output buffering.
	 * 			- We advise you to set it to false in order to debug your code.
	 * 			- OUTPUT: On destruction, no ouput is done. We tryed to do so, to facilitate handling in the calling script, but, this output
	 * 				takes place BEFORE the template, and not IN the template itself. That's why you have to do the ouput explicitely at the 
	 * 				end of your calling script.
	 * 	- page_access: {associative array} Security parameters, see the property mil_page_basic::page_access
	 * 	- include_sibling_lang: {bool} (optional, default is TRUE) If TRUE, it loads the locale (sibling) $GLOBALS['mil_lang'] variable of the siblings lang/{lang}.lang.php... 
	 * 		 ... so that ajax requests dedicated to autocomplete can work correctly (See files in 1001_addon/library/datamalico/frontend_access/autocomplete/ )
	 * 		- Advantage of using mil_page_basic for autocomplete pages:
	 * 			- It costs a bit of resource to include mil_.conf.php
	 * 				- BUT we take advantage of all other mil_ resources (mil_mysqli, mil_basket, mil_Email...) and datamalico.
	 *			- And it costs a bit of resource to intanciate mil_page_basic
	 *				- BUT we take advantage of the mil_page_basic::mil_check_security_access()
	 * 	- save_history: {bool} (optional, default is TRUE) add an history item into the session history, so that ajax server pages are not taken into accont into the 
	 * 		$_SESSION['mil_']['mil_page']['history'] and thus if a redirection is necessary, the redirection is correctly done the correct web (and not to an ajax server page).
	 *
	 * @attention There are 3 kinds of pages:
	 * 	- web pages:
	 * 		- include_sibling_lang => true
	 * 		- save_history => true
	 * 	- ajax server pages
	 *		- include_sibling_lang => true
	 * 		- save_history => false
	 * 	- ajax server pages espacially dedicated to autocomplete
	 *		- include_sibling_lang => false
	 * 		- save_history => false
	 */
	function __construct ($params) //($original_file, $ajax, $page_access)
	{
		$this->get_config__constructor ($params);

		$this->current_user_keys = $GLOBALS['security']['current_user_keys'];

		$this->lang = $GLOBALS['config_ini']['region']['lang'];

		$this->timing = array (
			'begin' => ''	// look for debug_chronometer () in mil_.lib.php
			, 'laps' => ''
			, 'end' =>  ''
		);

		// get the basket for this current registered:
		//$this->basket = new mil_basket ( array (
		//	'owner_id' => $this->current_user_keys['website']['reg_id']
		//	//, 'status_name' => array ("abandoned", "invoice", "payingnow")
		//));

		//echo trace2web($_SESSION, "_SESSION");
		//echo trace2web($GLOBALS['security']['current_user_keys'], "GLOBALS['security']['current_user_keys']");
		//echo trace2web($this->current_user_keys, "this->current_user_keys");

		if ($this->ajax)
		{
			// always modified
			header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");

			// HTTP/1.1
			header("Cache-Control: no-store, no-cache, must-revalidate");
			header("Cache-Control: post-check=0, pre-check=0", false);

			header('Content-type: application/json; charset=utf-8');
			ob_start();	// lock the output buffering

		}
		else
		{
			@header('Content-type: text/html; charset=utf-8');
		}

		if ($this->include_sibling_lang === TRUE) $GLOBALS['mil_lang'] = mil_get_lang_file ($this->original_file);	// get lang files
		if ($this->save_history === TRUE) $this->set_history_page();


		$this->mil_check_security_access (); //$access_forbidden = mil_check_security_access ($this->security['page_access']);	// check if the current user can access this file
		$this->page_params = $this->get_data_from_GET_POST ($_GET, $_POST);	//echo trace2web($this->page_params, "this->page_params");


		// pagination: gets the pagination params given through GET or POST method or default pagination params:
		if (
			!isset($this->page_params['page'])
			&& !isset($this->page_params['perpage'])
		)
		{
			$this->pagination = new pagination ();
		}
		else if (
			isset($this->page_params['page'])
			&& isset($this->page_params['perpage'])
		)
		{
			$this->pagination = new pagination ( array (
				'page' => $this->page_params['page']
				, 'perpage' => $this->page_params['perpage']
			));
		}
		else if (
			isset($this->page_params['page'])
			&& !isset($this->page_params['perpage'])
		)
		{
			$this->pagination = new pagination ( array (
				'page' => $this->page_params['page']
			));
		}
		else if (
			!isset($this->page_params['page'])
			&& isset($this->page_params['perpage'])
		)
		{
			$this->pagination = new pagination ( array (
				'perpage' => $this->page_params['perpage']
			));
		}

		//trace2file ($this, __CLASS__, __FILE__, true);
		//echo trace2web($this->pagination, "this->pagination in mil_page");

		//echo trace2web($this, "At the end of the " . __CLASS__ . " constructor");
	}
	protected function get_config__constructor ($params)
	{
		if (!exists_and_not_empty($params['original_file']))
		{
			new mil_Exception (__FUNCTION__ . " : \$params['original_file'] must not be empty."
				, "1201111240", "WARN", $config['calling_FILE'] .":". $config['calling_LINE'] );
			return;
		}
		else
		{
			$this->original_file = $params['original_file'];
		}

		if (exists_and_not_empty($params['ajax'])) $this->ajax = $params['ajax'];
		if (exists_and_not_empty($params['page_access'])) $this->page_access = $params['page_access'];
		if (isset($params['include_sibling_lang'])) $this->include_sibling_lang = $params['include_sibling_lang']; else $this->include_sibling_lang = TRUE;
		if (isset($params['save_history'])) $this->save_history = $params['save_history']; else $this->save_history = TRUE;

		if (exists_and_not_empty($params['page_params'])) $this->page_access = $params['page_params'];
	}

	function __destruct ()
	{
		//trace ("Destruction of an object " . __CLASS__);

		// ###
		// Send the expected output into a file:
		// $ob = ob_get_contents (); //trace2file($ob, "ob", __FILE__, TRUE); //trace2file($this_mil_page->output, "this_mil_page->output", __FILE__);
		// ###

		// The following if is handy to make an automatic output of object or arrays, to be sent to another page recieving JSON data structure (ajax)
		if ($this->ajax) 
		{
			ob_end_clean();		// unlock the output buffering 
			//$ajaxReturn = mixed_htmlentities($ajaxReturn);
			$this->output = json_encode($this->output); // is actually the ajaxReturn

			//$ajaxReturn = json_encode($ajaxReturn);
			//$ajaxReturn = mixed_rawurlencode($ajaxReturn); // --> o.responseText gets some nul values if there are some chars : éàç...
			//$ajaxReturn = mixed_convert_uuencode($ajaxReturn);	// makes a js bug: Uncaught TypeError: Object [object Window] has no method 'is_scalar' 

			echo $this->output;
		}
		else
		{
			//echo trace2web($ajaxReturn, "ajaxReturn");
			//echo $this->output;
		}
	}

	/**
	 * This method returns an output (for debug purposes) to see the content of the property: $this->current_user_keys.
	 *
	 * @return {string} An output of this property.
	 */
	public function debugDisplay_current_user_keys ()
	{
		return trace2web ($this->current_user_keys, "this->current_user_keys");
	}


	/**
	 * This method stops every script after the call of this function, if the user is not granted
	 * You have to customize it depending on your needs.
	 *
	 * @return No value.
	 *
	 * Examples of call:
	 * @code
	 * mil_check_security_access ( array (
	 * 	"connection_type_access" => "WEBSITE_CONNECTED_GRANTED"
	 * 	, "authorized_roles" => array("Customer", "Professional")
	 * 	, "permission" => "mil_admin"
	 * ));
	 * @endcode
	 *
	 * @todo Improve the documentation of this method.
	 */
	protected function mil_check_security_access () 
	{
		// ############################
		// read access rights given by to the page calling this function :
		// "MANAGER_GRANTED", "WEBSITE_CONNECTED_GRANTED", "EVERYBODY_GRANTED"
		$connection_type_access = $this->page_access['connection_type_access'];			

		// Administrator, Editor, Publisher : see in DB modx_user_roles.name or
		// Customer, Volunteer, Professional : or mil_c_role.role_name
		$authorized_roles = isset($this->page_access['authorized_roles']) ? $this->page_access['authorized_roles'] : array("");	

		// only for manager roles : mil_admin... see columns of modx_user_roles
		$permission = isset($this->page_access['permission']) ? $this->page_access['permission'] : array("");

		// exit_immediatly
		//$exit_immediatly = isset($this->page_access['exit_immediatly']) ? $this->page_access['exit_immediatly'] : true;


		// ############################
		// The user acting :
		// my staff can be connected as manager or as client, so it will recognize if the action is done via public webiste or via manager site.

		//echo trace2web ($_SESSION, "_SESSION");
		//echo trace2web ($this->current_user_keys, "this->current_user_keys");

		if ($this->page_access['connection_type_access'] == "EVERYBODY_GRANTED")
		{
			// ok for everybody
			return;
		}
		else
		{
			et_voila_you_go_out ($ajaxReturn['metadata']['returnMessage']);
			die();		// in order to stop the whole loading page
		}
	}

	/**
	 * Each server page can receive parameters (via GET or POST method).
	 * Returns the fusion of params _POST and _GET. When, sending params, you can overwrite values of _POST using _GET or overwrite values of _GET using _POST.
	 * If you want to overwrite _POST using _GET, then call the function like this:
	 * @code
	 * $this->page_params = $this->get_data_from_GET_POST(_GET, _POST); // _GET is first, because _GET must win upon _POST.
	 * @endcode
	 *
	 * @param $_GET_or_POST_priority_1: {associative array} You set this to $_GET or $_POST. If this $_GET_or_POST_priority_1['delupsert'] is set, then the function returns 
	 * 	$_GET_or_POST_priority_2['delupsert'].
	 * @param $_GET_or_POST_priority_2: {associative array} You set this to $_GET or $_POST. If $_GET_or_POST_priority_1['delupsert'] is not set, then $_GET_or_POST_priority_2['delupsert'] 
	 * 	is returned.
	 *
	 * @return $page_params {associative array} Merge of $_GET_or_POST_priority_1 overwritting $_GET_or_POST_priority_2. Morevoer, this result is mixed_stripslashes()
	 *
	 * @warning In order to avoid the loss of GET params, please don't forget, in your .htaccess to add [QSA] at the end of your RewriteRule rules, so that all params in the URI can kept.
	 */
	public function get_data_from_GET_POST ($_GET_or_POST_priority_1, $_GET_or_POST_priority_2)
	{
		$page_params = array_merge((array) $_GET_or_POST_priority_2, (array) $_GET_or_POST_priority_1);
		$page_params = mixed_stripslashes ($page_params);
		return $page_params;
	}

	/**
	 * This method manages the templating, the addition of the javascript page, and the internationalization.
	 *
	 * Following placholders (if they exist in $this->output, most of the time your html template) are converted with the correct value:
	 * - [+page+] gets the value of $this->pagination->page
	 * - [+perpage+] gets the value of $this->pagination->perpage
	 * - [+mil_lang+] gets the value of $GLOBALS['config_ini']['region']['lang']
	 * 
	 * Javascript code also gets the following variables (with the correct values) in a global scope:
	 * @code
	 * var pagination = {page: PAGE_PARAM, perpage: PERPAGE_PARAM};
	 * @endcode
	 * It would have been handy to add these pagination values into the javascript page, but, the javascript page, is not refreshed for each user.
	 * (for performance reasons). The javascript page, is refreshed everyday, only for lang. That's why, as the javascript page is used but many users,
	 * we add these pagination values into the HTML page as a javascript code.
	 *
	 * @param params (optional, default is array()) {associative array} Params for this function.
	 * 	- template_id: (optional, default is 0) {integer or string} You can here specify the HTML template identificator. 
	 * 		This template file is stored at the place that the php file creating this mil_page object.
	 * 		- If this param is an integer, you can set the template by its position: 0 for the first template, 1 for the second one...
	 * 		- If this param is a string, this must be the template name eg: "main_template".
	 *
	 * @todo Give more explanations about HTML templates, their structure, and javascript files (and their refreshing):
	 *
	 * How to explicitelly refresh an HTML page, and its javascript: (otherwise this is done every day, at the first connection after midnight).
	 * @code
	 * ?langs=refresh (at the end of the URL)
	 * Or by modifying $GLOBALS['config_ini']['langs'] = 'refresh'; in mil_.conf.php
	 * @endcode
	 *
	 * Explanations about lang variables:
	 * There are two global associative arrays for translation:
	 * - $GLOBALS['mil_lang_common'] in 1001_addon/library/mil_/lang/{lang}.lang.php
	 * - $GLOBALS['mil_lang'] in a 'lang' folder next to the client.php page, eg: ./lang/{lang}.lang.php
	 * For each of these arrays, you can add keys and values. Then you can use these, in your client.php.html and client.php.js pages, placeholders to insert
	 * values.
	 * @code
	 * // Eg: if your ./lang/{lang}.lang.php has:
	 * $mil_lang['my_translated_label'] = "Hello, this is my translated label!";
	 *
	 * // Then in your client.php.html page, you can use MODx placeholder style:
	 * <span>[+my_translated_label+]</span>
	 *
	 * // Or in your client.php.js, you can do:
	 * alert("[+my_translated_label+]");
	 * @endcode
	 *
	 * @todo Continue the transition from procedural to object method of the function get_tpl_withGoodLang_fromDynamicCache() and some others...
	 */
	public function render_html_page ($params = array())
	{
		$config = $this->get_config__render_html_page($params);

		$this->output = get_tpl_withGoodLang_fromDynamicCache ($config['template_id'], $this->original_file);	// render_html_page();
		$this->pagination_params_into_tpl ();
		$this->lang_into_tpl ();
		$this->page_params_into_tpl ();
		$this->current_user_keys_into_tpl ();
		$this->html_research_operators();

		//if (exists_and_not_empty($config['apply_function'])) $config['apply_function'] ($this); // execute the function given into parameter.
		/*
		 * You can also add your own specific function to the execution of the render_html_page() method.
		 * 	- apply_function: (optional) {string} You can send a function to be executed. Actually, you just send, the name of the function (declared in 
		 * 	your own code) and this function will executed at the end of the render_html_page() and will receive as parameter, the $this object.
		 * 		- Note that protected and private objects are not accessible.
		 */
	}
	protected function get_config__render_html_page ($params)
	{
		$config;

		if (exists_and_not_empty($params['template_id'])) $config['template_id'] = $params['template_id'];
		else $config['template_id'] = 0;	// default value

		//if (exists_and_not_empty($params['apply_function'])) $config['apply_function'] = $params['apply_function'];		

		return $config;
	}

	protected function pagination_params_into_tpl ()
	{
		// PLACEHOLDERS of personal vars
		$this->output = str_replace("[+page+]", $this->pagination->page, $this->output);
		$this->output = str_replace("[+perpage+]", $this->pagination->perpage, $this->output);

		$js = '<script type="text/javascript">var pagination = {page: '
			. $this->pagination->page . ', perpage: '
			. $this->pagination->perpage . '};</script>';

		$this->output = $js . $this->output;
	}

	/**
	 * This method adds the current language used by the user into the HTML page through a javascript global variable.
	 */
	protected function lang_into_tpl ()
	{
		$js = '<script type="text/javascript">var lang = "' . $GLOBALS['config_ini']['region']['lang'] . '";</script>';

		$this->output = $js . $this->output;
	}

	protected function page_params_into_tpl ()
	{
		$page_params = json_encode($this->page_params);
		$js = '<script type="text/javascript">var page_params = ' . $page_params . ';</script>';
		// --> var page_params = {"q":"admin","tabs_menu":"TABS_MENU_DATA","tabs_object":"TABS_OBJECT_REGISTERED"};
		$this->output = $js . $this->output;

		return;

		$js_params = array();
		if (exists_and_not_empty($this->page_params))
		{
			foreach ($this->page_params as $key => $value)
			{
				$js_params[]= "$key:\"$value\"";
			}
		}
		$js = '<script type="text/javascript">var page_params = {' . implode (", ", $js_params) . '};</script>';

		// --> var page_params = {q:"admin", tabs_menu:"TABS_MENU_DATA", tabs_object:"TABS_OBJECT_REGISTERED"};

		$this->output = $js . $this->output;
	}

	/**
	 * Your own current_user_keys are given to the client page as a javascript variable, but this is just an information to the client page,
	 * 	and the security must be driven on the server side.
	 */
	protected function current_user_keys_into_tpl ()
	{
		$current_user_keys = json_encode($this->current_user_keys);

		$js = '<script type="text/javascript">var current_user_keys = ' . $current_user_keys . ';</script>';

		$this->output = $js . $this->output;
	}

	/**
	 * This method adds the current language used by the user into the HTML page through a javascript global variable.
	 *
	 * @todo Add 2 operators: MIN() and MAX().
	 * @todo Check if REGEXP, begins, ends are ok with numbers and time fields in get_WHERE_clause() in the datamalico_server_ajax.lib.php
	 */
	protected function html_research_operators ()
	{
		$html_research_operators = '
			<div id="div_html_operators" style="display:none;">

			<select id="html_simple_operators">
			<option value="eq" selected="selected">' . $GLOBALS['mil_lang_common']['operator_equals'] . '</option>
			<option value="gt_or_eq">' . $GLOBALS['mil_lang_common']['operator_gt_or_eq'] . '</option>
			<option value="lt_or_eq">' . $GLOBALS['mil_lang_common']['operator_lt_or_eq'] . '</option>
			<option value="betw">' . $GLOBALS['mil_lang_common']['operator_between'] . '</option>
			</select>

			<select id="html_advanced_operators">
			<option value="like" selected="selected">' . $GLOBALS['mil_lang_common']['operator_containing'] . '</option>
			<option value="notlike">' . $GLOBALS['mil_lang_common']['operator_not_contain'] . '</option>
			<option value="eq">' . $GLOBALS['mil_lang_common']['operator_equals'] . '</option>
			<option value="noteq">' . $GLOBALS['mil_lang_common']['operator_different'] . '</option>
			<option value="lt">' . $GLOBALS['mil_lang_common']['operator_lt'] . '</option>
			<option value="gt">' . $GLOBALS['mil_lang_common']['operator_gt'] . '</option>
			<option value="lt_or_eq">' . $GLOBALS['mil_lang_common']['operator_lt_or_eq'] . '</option>
			<option value="gt_or_eq">' . $GLOBALS['mil_lang_common']['operator_gt_or_eq'] . '</option>
			<option value="betw">' . $GLOBALS['mil_lang_common']['operator_between'] . '</option>
			<option value="regexp">' . $GLOBALS['mil_lang_common']['operator_regexp'] . '</option>
			<option value="notregexp">' . $GLOBALS['mil_lang_common']['operator_notregexp'] . '</option>
			<option value="begins">' . $GLOBALS['mil_lang_common']['operator_begins'] . '</option>
			<option value="notbegins">' . $GLOBALS['mil_lang_common']['operator_notbegins'] . '</option>
			<option value="ends">' . $GLOBALS['mil_lang_common']['operator_ends'] . '</option>
			<option value="notends">' . $GLOBALS['mil_lang_common']['operator_notends'] . '</option>
			</select>

			</div>
			';

		$this->output = $this->output . $html_research_operators;
	}

	/**
	 * Allows you to see if a user has the role in his profile. See also the independant function has_the_role_in_profile()
	 *
	 * @param role_tobe_found (mandatory) {string} Is the role to be found. (See in the DB: mil_c_role.role_name)
	 *
	 * @return {boolean} TRUE|FALSE
	 *
	 * Example of use:
	 * @code
	 * $mil_page->current_reg_has_role ("Professional");
	 * @endcode
	 */
	public function current_reg_has_role ($role_tobe_found)
	{
		$current_reg_has_role = has_the_role_in_profile ($role_tobe_found, $this->current_user_keys['website']['registered_roles']);
		return $current_reg_has_role;
	}


	/**
	 * This method is usefull in order to come back to the page desired before connection.
	 * Is mainly used in assets/snippets/registered/registered_weblogin/weblogin.processor.inc.php
	 *
	 * @todo Not implemented yet, but will be necessary to comme to the page desired before connexion.
	 */
	private function set_history_page ()
	{
		//trace2file ("", "", __FILE__, true);
		//$this->a_list_1 = array ();
		//$this->a_list_2 = array ();


		$a_dont_remember_page = array (
			'iconnect'
			, 'souscrire'
			, 'test'
		);
		$b_dont_remember_page = false;

		// check if current page is different than one of the dont_remember_page:
		foreach ($a_dont_remember_page as $index => $page_REQUEST_URI)
		{
			//if ($_SERVER['REQUEST_URI'] !== "/iconnect")
			if ($_SERVER['REQUEST_URI'] === "/" . $page_REQUEST_URI)
			{
				$b_dont_remember_page = true;
				break;
			}
		}

		// if the current page is not one of the dont_remember_page, then keep it in memory:
		//trace2file ($b_dont_remember_page, "b_dont_remember_page", __FILE__);
		if ($b_dont_remember_page === false)
		{
			//trace2file ("is adding the page!!!");




			// ##################################
			// Put the url at the end of the array:
			/*
			$_SESSION['mil_']['mil_page']['history'][] = $_SERVER['REQUEST_URI'];
			if (count($_SESSION['mil_']['mil_page']['history']) > 10)
			{
				array_shift ($_SESSION['mil_']['mil_page']['history']);	 // Shift an element off the beginning of array 
			}


			$this->a_list_1[] = $_SERVER['REQUEST_URI'];
			if (count($this->a_list_1) > 10)
			{
				array_shift ($this->a_list_1);	 // Shift an element off the beginning of array 
			}
			 */



			// ##################################
			// Put the url at the beginning of the array:

			if (!exists_and_not_empty($_SESSION['mil_']['mil_page']['history'])) $_SESSION['mil_']['mil_page']['history'] = array ();
			$_SESSION['mil_']['mil_page']['history'] = (array)$_SESSION['mil_']['mil_page']['history'];
			array_unshift ($_SESSION['mil_']['mil_page']['history'], $_SERVER['REQUEST_URI']); // Put the url at the beginning of the array (at index zero)
			if (count($_SESSION['mil_']['mil_page']['history']) > 10)
			{
				$_SESSION['mil_']['mil_page']['history'] = array_pop ($_SESSION['mil_']['mil_page']['history']); // delete the oldest element at the 9th index
			}


			/*
			if (!exists_and_not_empty($this->a_list_2)) $this->a_list_2 = array ();
			//trace2file ("vardump, begin");
			//var_dump ($this->a_list_2);
			//trace2file ("vardump, end");
			array_unshift ($this->a_list_2, $_SERVER['REQUEST_URI']); // Put the url at the beginning of the array (at index zero)
			if (count($this->a_list_2) > 10)
			{
				$this->a_list_2 = array_pop ($this->a_list_2); // delete the oldest element at the 9th index
			}
			 */
		}

		//trace2file ($this->a_list_1, "this->a_list_1", __FILE__);
		//trace2file ($this->a_list_2, "this->a_list_2", __FILE__);
	}
}


// #############################################################
// #############################################################
// #############################################################
// Procedural Functions which still must be transformed to object

/**
 * Allows you to see if a user has the role in his profile.
 *
 * @param role_tobe_found (mandatory) {string} Is the role to be found. (See in the DB: mil_c_role.role_name)
 * @param registereds_role_array (mandatory) {associative array} Is for example: $mil_page_object->current_user_keys['website']['registered_roles'] or 
 * 	in the past $GLOBALS['security']['current_user_keys']['website']['registered_roles']
 *
 * @return {boolean} TRUE|FALSE
 *
 * Example of use:
 * @code
 * $has_the_role = has_the_role_in_profile ("Professional", $mil_page_object->current_user_keys['website']['registered_roles']);
 * @endcode
 */
function has_the_role_in_profile ($role_tobe_found, $registereds_role_array)
{
	//trace2file ("", "", __FILE__, true);
	//trace2file ($registereds_role_array, "registereds_role_array", __FILE__);
	if (
		param_exists_and_not_empty($registereds_role_array)
		&& $registereds_role_array !== "NULL"
		&& $registereds_role_array !== NULL
	)
	{
		$hasThis_role = false;
		foreach ($registereds_role_array as $key => $value)
		{
			//trace2file("$role_tobe_found /vs: ".$registereds_role_array["$key"]['role_name'], "", __FILE__);
			if ($role_tobe_found == $registereds_role_array["$key"]['role_name'])
			{
				$hasThis_role = true;
				break;
			}
		}

		return $hasThis_role;
	}
	return false;
}


function et_voila_you_go_out ($error_msg)
{
	trace($error_msg);
}


// Taken from webLoginExtractDeclarations in order to parse a template and extract the subplate desired
function extract_subTemplate_declaration (&$html)
{
	// Means that at the begining of an html template, you can add : 
	// 	<!-- #declare:separator <hr> -->
	// in order to declare that the <hr> tag is a template separator.
	// Or wou can just easily use :
	// 	<!--tpl_separator-->
	// as separator, without having to declare anything.
	$declare  = array();
	if(strpos($html,"<!-- #declare:")===false) return $declare;
	$matches= array();
	if (preg_match_all("/<\!-- \#declare\:(.*)[^-->]?-->/i",$html,$matches)) {    
		for($i=0;$i<count($matches[1]);$i++) {
			$tag = explode(" ",$matches[1][$i]);
			$tagname=trim($tag[0]);
			$tagvalue=trim($tag[1]);
			$declare[$tagname] = $tagvalue;
		}
		// remove declarations
		$html = str_replace($matches[0],"",$html);
	}
	return $declare;
}


function extract_subTemplates ($tpls_as_string, $tpl_id)
{
	$subTemplate;
	$declare = extract_subTemplate_declaration ($tpls_as_string);    // mil_ Like I use the snippet 1001-includeFile this function doesn't work so I don't use thoses $tpls
	$tpls_as_array = explode((isset($declare["separator"]) ? $declare["separator"] : "<!--tpl_separator-->"), $tpls_as_string);
	//$tpls_as_array = preg_split ("/<!--tpl_separator-->\R/m", $tpls_as_string);

	// ###################
	// Get the tpl_label : the label can be on any line in the tpl, but with the mention : tpl_label.
	// The first line of the sub template with this mention will take consideration of the template label.
	// The label must be between double quotes.
	if (is_string($tpl_id))
	{
		for ($i=0; $i < count($tpls_as_array); $i++)
		{
			$lines = preg_split ('/$\R?^/m', $tpls_as_array["$i"]); // That would match line breaks on Windows, Mac and Linux!
			if ($i == 0) array_unshift($lines, ""); // necessary to do so, because otherwise, for the $tpls_as_array[0], the first line of the tpl is the elmt 0 of $lines

			//trace ("tpls_as_array[$i]: [" . htmlentities($tpls_as_array[$i]) . "]");
			//foreach ($lines as $key => $value) {trace ("$key:[".htmlentities($value)."]");}

			$tpl_label;
			$tpl_label_tab = preg_grep ("/tpl_label/i", $lines);
			//echo trace2web($tpl_label, "tpl_label");

			foreach ($tpl_label_tab as $key => $value)
			{
				$tpl_label = $value;
				break; // only accept the first tpl_label of the subTemplate
			}
		/*$tpl_label = str_replace("<!--", "", $tpl_label);
		$tpl_label = preg_replace("/\s/", "", $tpl_label);
		$tpl_label = str_replace("tpl_label", "", $tpl_label);
		$tpl_label = str_replace(":", "", $tpl_label);
		$tpl_label = str_replace("-->", "", $tpl_label);
		trace ("tpl_label: [" . htmlentities($tpl_label) . "]");
		 */

			$tpl_label = preg_replace('/^.*"(.*)".*$/i', "$1", $tpl_label);
			//trace ("tpl_label: [" . htmlentities($tpl_label) . "]");

			if ($tpl_label === $tpl_id)
			{
				$subTemplate = $tpls_as_array[$i];
				break;
			}
		}
	}

	// ###################
	// Case where there is no tpl_label but only a numeric tpl_id
	else if (is_int($tpl_id))
	{
		$subTemplate = $tpls_as_array[$tpl_id];
	}
	else
	{
		new mil_Exception ("The tpl_id of this function must be a string or a int, but it is not !", "1201111240", "ERROR", __FILE__ .":". __LINE__ );
	}

	//trace ("[" . htmlentities($tpls[$tpl_id][1]) . "]");
	return $subTemplate;
}

#############################################################
#############################################################
#############################################################
#############################################################
#############################################################
# Lang, translation, internationalization

// get_tpl_withGoodLang_fromDynamicCache ($tpl_id, __FILE__);
// tpl_id : can be a number (can be 0 for the first subtemplate) or a tpl_label between double quotes.
function get_tpl_withGoodLang_fromDynamicCache ($tpl_id, $file_path)
{
	$doc_root = realpath($_SERVER['DOCUMENT_ROOT']) ."/";
	$file_dirname = dirname(realpath($file_path));
	$lang_files = $file_dirname . "/lang";
	include $lang_files . "/" . $GLOBALS['config_ini']['region']['lang'] . ".lang.php"; // integrates the $mil_lang variable for local message. (different from common messages)

	###############################
	# Translation : 
	# 1) translation vars can go into a cache file.

	$tpl_html = file2string ($file_path . ".html");
	internationalize_html ($tpl_html, $mil_lang, $file_path);

	$tpl_js = file2string ($file_path . ".js"); // this kind of inclusion is necessary for the internationalization and lang files.
	internationalize_js ($tpl_js, $mil_lang, $file_path);

	$tpl_with_lang = file2string ($lang_files . "/html/" . $GLOBALS['config_ini']['region']['lang'] . ".html");
	$subTemplate = extract_subTemplates ($tpl_with_lang, $tpl_id);
	//$tpl = $tpls[0];

	return $subTemplate;
}

/*
function get_JS_MIL_LIB_withGoodLang_fromDynamicCache ()
{
	$file_path = "1001_addon/assets/templates/common/js/mil_.lib";
	$lang_files = dirname($file_path) . "/lang";
	include $lang_files . "/" . $GLOBALS['config_ini']['region']['lang'] . ".lang.php";

	###############################
	# Translation : 
	# 1) translation vars can go into a cache file.

	//foreach ($mil_lang_js as $key => $value) $tpl_registerCreation_js = str_replace("[+$key+]", $value, $tpl_registerCreation_js);
	$tpl_js = file2string ($file_path . ".js"); // this kind of inclusion is necessary for the internationalization and lang files.
	internationalize_js ($tpl_js, $mil_lang_js, $file_path);

	$link_to_js = '<script type="text/javascript" src="1001_addon/assets/templates/common/js/lang/js/' . $GLOBALS['config_ini']['region']['lang'] . '.js"></script>';
	return $link_to_js;
}
 */



// Only for the common JS file : /1001_addon/assets/templates/common/js/mil_.lib.js
function get_JS_withGoodLang_fromDynamicCache ($js_file)
{
	$relative_file_path = $js_file;
	$relative_parent_path = dirname($relative_file_path);
	$full_file_path = $_SERVER["DOCUMENT_ROOT"].$relative_file_path;
	$full_parent_path = dirname($full_file_path);
	$lang_files = $full_parent_path . "/lang";
	include $lang_files . "/" . $GLOBALS['config_ini']['region']['lang'] . ".lang.php";

	###############################
	# Translation : 
	# 1) translation vars can go into a cache file.

	//foreach ($mil_lang_js as $key => $value) $tpl_registerCreation_js = str_replace("[+$key+]", $value, $tpl_registerCreation_js);
	$tpl_js = file2string ($full_file_path); // this kind of inclusion is necessary for the internationalization and lang files.
	internationalize_js ($tpl_js, $mil_lang, $full_file_path);

	$link_to_js = '<script type="text/javascript" src="'.$relative_parent_path.'/lang/js/' . $GLOBALS['config_ini']['region']['lang'] . '.js"></script>';
	return $link_to_js;
}


function internationalize_html ($tpl, $mil_lang, $php_file_full_path)
{
	//$config_ini['lang']
	//$_GET['internationalize'] == "refresh"
	//filemtime

	$lang_html_folder = dirname($php_file_full_path) . "/lang/html";
	$lang_html_file = $lang_html_folder . "/" . $GLOBALS['config_ini']['region']['lang'] . ".html";
	if (!file_exists($lang_html_folder)) mkdir($lang_html_folder, 0755);

	$date = getdate();
	$today_midnight = mktime(0, 0, 0, $date['mon'], $date['mday'], $date['year']);
	//print ("minuit:" . date("Y-m-d H:i:s", $today_midnight) . "<br />");
	$lastChange;


	// File rewriting everyday or if specified in the GET vars
	$refresh_html = false;
	$refresh_html = !file_exists($lang_html_file) ? true : $refresh_html;

	if (!file_exists($lang_html_file))
	{
		$refresh_html = true;

	} else {
		$lastChange = filemtime($lang_html_file);
		$refresh_html = $lastChange <= $today_midnight ? true : $refresh_html;
	}

	//$refresh_html = IN_MANAGER_MODE;
	$refresh_html = $_GET['internationalize'] === 'refresh' ? true : $refresh_html;
	$refresh_html = $_GET['langs'] === 'refresh' ? true : $refresh_html;
	$refresh_html = $GLOBALS['config_ini']['langs'] === 'refresh' ? true : $refresh_html;

	if ($refresh_html)
	{
		$this_relative_file_path = str_replace (realpath($_SERVER['DOCUMENT_ROOT']) . "/", "", dirname(realpath($php_file_full_path)));
		$tpl = str_replace("[+this_relative_file_path+]", $this_relative_file_path, $tpl); // necessary to create a javascript file with the good lang.
		$tpl = str_replace("[+mil_lang+]", $GLOBALS['config_ini']['region']['lang'], $tpl); // necessary to create a javascript file with the good lang.


		///////////////////////////////////////////
		// For html select listing related to the quality :
		// $quality_pattern = "[+mil_c_service_quality_to_html_select+]";
		// $tpl = str_replace($quality_pattern, mil_c_service_quality_to_html_select(), $tpl);

		///////////////////////////////////////////
		// Especially for profession listings :
		// $mil_v_register_profession_to_html_select = "[+mil_v_register_profession_to_html_select+]";
		// $tpl = str_replace($mil_v_register_profession_to_html_select, mil_v_register_profession_to_html_select (), $tpl);


		///////////////////////////////////////////
		// For translation of the local .lang.php
		if (isset($mil_lang))
			foreach ($mil_lang as $key => $value) $tpl = str_replace("[+$key+]", $value, $tpl);

		// For translation of the common .lang.php
		if (isset($GLOBALS['mil_lang_common']))
			foreach ($GLOBALS['mil_lang_common'] as $key => $value) $tpl = str_replace("[+$key+]", $value, $tpl);


		///////////////////////////////////////////
		// Especially for country listings :
		//$country_to_html_select = mil_country_to_html_select ();
		//$country_to_html_select['country_listing'];
		//$country_to_html_select['calling_country_listing'];

		//$country_listing_pattern = "[+country_listing+]";
		//$calling_country_listing_pattern = "[+calling_country_listing+]";

		//$nb_country_listing = substr_count ($tpl, $country_listing_pattern);
		//$nb_calling_country_listing = substr_count ($tpl, $calling_country_listing_pattern);

		//for ($i = 1; $i <= $nb_country_listing; $i++)
		//{
		//	$select = '<select size="1" name="country_listing_'.$i.'" id="country_listing_'.$i.'" [+country_listing_'.$i.'_readonly+]>' . $country_to_html_select['country_listing'] . '</select>';

		//$country_to_html_select['country_listing'] = 'country_listing_'.$i;

		//$pos = strpos($tpl, $country_listing_pattern);
		//$tpl = substr_replace($tpl, $select, $pos, strlen($country_listing_pattern));
		//}

		//for ($i = 1; $i <= $nb_calling_country_listing; $i++) 
		//{
		//	$select = '<select size="1" name="calling_country_listing_'.$i.'" id="calling_country_listing_'.$i.'" class="calling_country_listing" [+calling_country_listing_'.$i.'_readonly+]>' . $country_to_html_select['calling_country_listing'] . '</select>';

		//$country_to_html_select['calling_country_listing'] = 'calling_country_listing_'.$i;

		//$pos = strpos($tpl, $calling_country_listing_pattern);
		//$tpl = substr_replace($tpl, $select, $pos, strlen($calling_country_listing_pattern));
		//}


		$mil_lang = array();
		include (dirname(__FILE__) . "/lang/" . $GLOBALS['config_ini']['region']['lang'] . ".lang.php");
		foreach ($mil_lang as $key => $value) $tpl = str_replace("[+$key+]", $value, $tpl);





		$fp = fopen($lang_html_file, "w");

		if (flock($fp, LOCK_EX))  // pose un verrou exclusif
		{
			ftruncate($fp, 0);     // effacement du contenu
			fwrite($fp, $tpl);
			flock($fp, LOCK_UN);   // libère le verrou
		} else {
			new mil_Exception ("This is not possible to lock the file : $lang_html_file", "1201111240", "WARN", __FILE__ .":". __LINE__ );
		}

		fclose($fp);
	}

	//if (isset($mil_lang))
	//	foreach ($mil_lang as $key => $value) $tpl = str_replace("[+$key+]", $value, $tpl);
	//return $tpl;
}

function internationalize_js ($tpl, $mil_lang, $php_file_full_path)
{
	//$config_ini['lang']
	//$_GET['internationalize'] == "refresh"
	//filemtime

	$lang_js_folder = dirname($php_file_full_path) . "/lang/js";
	$lang_js_file = $lang_js_folder . "/" . $GLOBALS['config_ini']['region']['lang'] . ".js";
	if (!file_exists($lang_js_folder)) mkdir($lang_js_folder, 0755);

	$date = getdate();
	$today_midnight = mktime(0, 0, 0, $date['mon'], $date['mday'], $date['year']);
	//print ("minuit:" . date("Y-m-d H:i:s", $today_midnight) . "<br />");
	$lastChange;


	// File rewriting everyday or if specified in the GET vars
	$refresh_js = false;
	$refresh_js = !file_exists($lang_js_file) ? true : $refresh_js;

	if (!file_exists($lang_js_file))
	{
		$refresh_js = true;

	} else {
		$lastChange = filemtime($lang_js_file);
		$refresh_js = $lastChange <= $today_midnight ? true : $refresh_js;
	}

	//$refresh_js = IN_MANAGER_MODE;
	$refresh_js = $_GET['internationalize'] === 'refresh' ? true : $refresh_js;
	$refresh_js = $_GET['langs'] === 'refresh' ? true : $refresh_js;
	$refresh_js = $GLOBALS['config_ini']['langs'] === 'refresh' ? true : $refresh_js;

	if ($refresh_js)
	{
		$this_relative_file_path = str_replace (realpath($_SERVER['DOCUMENT_ROOT']) . "/", "", dirname(realpath($php_file_full_path)));
		$tpl = str_replace("[+this_relative_file_path+]", $this_relative_file_path, $tpl); // necessary to create a javascript file with the good lang.
		$tpl = str_replace("[+mil_lang+]", $GLOBALS['config_ini']['region']['lang'], $tpl); // necessary to create a javascript file with the good lang.


		///////////////////////////////////////////
		// For translation of the local .lang.php
		if (isset($mil_lang))
			foreach ($mil_lang as $key => $value) $tpl = str_replace("[+$key+]", $value, $tpl);

		// For translation of the common .lang.php
		if (isset($GLOBALS['mil_lang_common']))
			foreach ($GLOBALS['mil_lang_common'] as $key => $value) $tpl = str_replace("[+$key+]", $value, $tpl);

		$fp = fopen($lang_js_file, "w");

		if (flock($fp, LOCK_EX))  // pose un verrou exclusif
		{
			ftruncate($fp, 0);     // effacement du contenu
			fwrite($fp, $tpl);
			flock($fp, LOCK_UN);   // libère le verrou
		} else {
			new mil_Exception ("This is not possible to lock the file : $lang_js_file", "1201111240", "WARN", __FILE__ .":". __LINE__ );
		}

		fclose($fp);
	}
}

function mil_get_lang_file ($file)
{
	include_once dirname($file) . "/lang/" . $GLOBALS['config_ini']['region']['lang'] . ".lang.php";
	return $mil_lang;
}


?>
